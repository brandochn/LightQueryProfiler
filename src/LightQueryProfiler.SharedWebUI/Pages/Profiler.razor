@page "/profiler"

@using LightQueryProfiler.Shared.Enums
@using LightQueryProfiler.Shared.Data
@using LightQueryProfiler.Shared.Models
@using LightQueryProfiler.Shared.Repositories
@using LightQueryProfiler.Shared.Repositories.Interfaces
@using LightQueryProfiler.Shared.Services
@using LightQueryProfiler.Shared.Services.Interfaces
@using System.Data.SqlClient

<NavMenu StartButtonOnClickCallBack="@OnStart"
		 ServerChanged="@SeverHandler"
		 UserChanged="@UserHandler"
		 PasswordChanged="@PasswordHandler"
		 AuthModeChanged="@AuthenticationModeHandler" />

@*<TableTemplate Items="Events" Context="profilerEvent">
	<TableHeader>
		@foreach (BaseColumnViewTemplate c in ProfilerViewTemplate.Columns)
		{
			<th>@c.Name</th>
		}
	</TableHeader>
	<RowTemplate>
		<td>@profilerEvent.Name</td>
		<td>@profilerEvent.Timestamp</td>
	</RowTemplate>
</TableTemplate>*@

<table class="table table-hover table-bordered ">
	<thead class="table-secondary">
		<tr>
			@foreach (BaseColumnViewTemplate c in ProfilerViewTemplate.Columns)
			{
				<th>@c.Name</th>
			}
		</tr>
	</thead>
	<tbody>
		@RowRender
	</tbody>
</table>



@code {
	public string? Server { get; set; }

	public AuthenticationMode AuthenticationMode { get; set; }

	public string? User { get; set; }

	public string? Password { get; set; }

	private string SessionName { get; set; } = "lqpSession";

	private List<Dictionary<string, object>> Events { get; set; } = new List<Dictionary<string, object>>();

	public BaseProfilerViewTemplate ProfilerViewTemplate { get; set; } = new DefaultProfilerViewTemplate();

	private RenderFragment? RowRender { get; set; }

	private IApplicationDbContext? _applicationDbContext;
	private IXEventRepository? _xEventRepository;
	private IXEventService? _xEventService;
	private IProfilerService? _profilerService;


	private void Configure()
	{
		SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();
		if (AuthenticationMode == AuthenticationMode.WindowsAuth)
		{
			builder.IntegratedSecurity = true;
			User = string.Empty;
			Password = string.Empty;
		}

		builder.TrustServerCertificate = true;
		builder.DataSource = Server;
		builder.InitialCatalog = "master";
		builder.UserID = User;
		builder.Password = Password;


		_applicationDbContext = new ApplicationDbContext(builder.ConnectionString);
		_xEventRepository = new XEventRepository(_applicationDbContext);
		_xEventService = new XEventService();
		_profilerService = new ProfilerService(_xEventRepository, _xEventService);
	}

	public void StartProfiling()
	{
		if (_profilerService == null)
		{
			return;
		}
		_profilerService.StartProfiling(SessionName, new DefaultProfilerSessionTemplate());
	}

	public async Task GetLastEventsAsync()
	{
		if (_profilerService != null)
		{
			List<ProfilerEvent>? _events;
			for (int i = 0; i < 20; i++)
			{
				_events = await _profilerService.GetLastEventsAsync(SessionName);
				if (_events != null)
				{
					Events.AddRange(AddRows(_events));
					RowRender = CreateRowComponent(Events);
				}
				StateHasChanged();
				await Task.Delay(900);
			}
		}
	}

	public void StopProfiling()
	{
		if (_profilerService == null)
		{
			return;
		}
		_profilerService.StopProfiling(SessionName);
	}

	private async void OnStart()
	{
		Configure();
		StartProfiling();
		await GetLastEventsAsync();
	}

	private void SeverHandler(string server)
	{
		Server = server;
	}

	private void UserHandler(string user)
	{
		User = user;
	}

	private void PasswordHandler(string pwd)
	{
		Password = pwd;
	}

	private void AuthenticationModeHandler(AuthenticationMode authenticationMode)
	{
		AuthenticationMode = authenticationMode;
	}

	private List<Dictionary<string, object>> AddRows(List<ProfilerEvent> events)
	{
		if (events == null)
		{
			return new List<Dictionary<string, object>>();
		}

		List<Dictionary<string, object>> newEvents = new List<Dictionary<string, object>>();
		Dictionary<string, object> data;
		foreach (var e in events)
		{
			data = new Dictionary<string, object>();

			foreach (BaseColumnViewTemplate c in ProfilerViewTemplate.Columns)
			{
				if (c.Name == "EventClass")
				{
					data["EventClass"] = e.Name ?? string.Empty;
					continue;
				}

				if (c.Name == "StartTime")
				{
					data["StartTime"] = e.Timestamp ?? string.Empty;
					continue;
				}

				string columName = c.Name;
				object columValue = string.Empty;

				if (e.Actions?.Any(a => c.EventsMapped.Contains(a.Key)) ?? false)
				{
					columValue = e.Actions.FirstOrDefault(a => c.EventsMapped.Contains(a.Key)).Value ?? string.Empty;
				}
				else
				{
					if (e.Fields?.Any(f => c.EventsMapped.Contains(f.Key)) ?? false)
					{
						columValue = e.Fields.FirstOrDefault(f => c.EventsMapped.Contains(f.Key)).Value ?? string.Empty;
					}
				}
				
				data[columName] = columValue;
			}

			newEvents.Add(data);
		}

		return newEvents;
	}

	private RenderFragment CreateRowComponent(List<Dictionary<string, object>> rows) => builder =>
	{
		foreach (var r in rows)
		{
			builder.OpenComponent(0, typeof(RowTemplate));
			builder.AddAttribute(1, "Row", r);
			builder.CloseComponent();
		}
	};
}
