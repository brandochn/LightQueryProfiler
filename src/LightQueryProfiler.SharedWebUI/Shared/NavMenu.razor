@using LightQueryProfiler.Shared.Extensions
@using LightQueryProfiler.Shared.Enums
@using Components
@using LightQueryProfiler.SharedWebUI.Data
@inject LightQueryProfilerInterop? LightQueryProfilerInterop

<nav class="navbar navbar-expand-md navbar-dark bg-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">Light Query Profiler</a>
		<button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
				aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
			<ul class="navbar-nav me-auto mb-2 mb-md-0">
				<li class="nav-item">
					<div class="navbar-text ms-1">
						<div class="input-group">
							<span class="input-group-text" id="basic-addon1">Server</span>
							<input id="inputServer" @oninput="OnServerChanged" value="@Server" type="text" class="form-control" placeholder="Server or IP address" aria-label="Server" aria-describedby="basic-addon1">
						</div>
					</div>
				</li>
				<li class="nav-item">
					<div class="navbar-text ms-1">
						<div class="input-group">
							<span class="input-group-text" id="basic-addon2">Auth</span>
							<select class="form-select" @bind="@AuthenticationMode" aria-label="Authentication select" @onclick="@CollapseUserAndPasswordInputs">
								@foreach (var am in GetAuthenticationModes())
								{
									<option value="@am"> @am.GetString() </option>
								}
							</select>
						</div>
					</div>
				</li>
				<li class="nav-item" hidden="@ShowUserAndPasswordInputs">
					<div class="navbar-text ms-1">
						<div class="input-group">
							<span class="input-group-text" id="basic-addon3">User</span>
							<input @oninput="OnUserChanged" value="@User" type="text" class="form-control" placeholder="User" aria-label="User" aria-describedby="basic-addon3">
						</div>
					</div>
				</li>
				<li class="nav-item" hidden="@ShowUserAndPasswordInputs">
					<div class="navbar-text ms-1">
						<div class="input-group">
							<span class="input-group-text" id="basic-addon4">Password</span>
							<input @oninput="OnPasswordChanged" value="@Password" type="password" class="form-control" placeholder="Password" aria-label="Password" aria-describedby="basic-addon3">
						</div>
					</div>
				</li>
				<li class="nav-item">
					<div class="navbar-text ms-2">
						<div class="input-group">
							<button disabled="@StartButtonDisabled" class="btn btn-outline-success" type="button" @onclick="@StartButtonOnClick">Start</button>
						</div>
					</div>
				</li>
				<li class="nav-item" hidden="@PauseButtonHidden">
					<div class="navbar-text ms-2">
						<div class="input-group">
							<button disabled="@PauseButtonDisabled" class="btn btn-outline-secondary" type="button" @onclick="@PauseButtonOnClick">Pause</button>
						</div>
					</div>
				</li>
				<li class="nav-item" hidden="@ResumeButtonHidden">
					<div class="navbar-text ms-2">
						<div class="input-group">
							<button disabled="@ResumeButtonDisabled" class="btn btn-outline-info" type="button" @onclick="@ResumeButtonOnClick">Resume</button>
						</div>
					</div>
				</li>
				<li class="nav-item">
					<div class="navbar-text ms-2">
						<div class="input-group">
							<button disabled="@StopButtonDisabled" class="btn btn-outline-danger" type="button" @onclick="@StopButtonOnClick">Stop</button>
						</div>
					</div>
				</li>
			</ul>
			<div class="d-flex" role="search">
				<input disabled="@SearchButtonDisabled" id="inputSearch" class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
				<button disabled="@SearchButtonDisabled" id="searchButton" class="btn btn-outline-light" type="button" @onclick="@SearchButtonOnClick">Search</button>
			</div>
		</div>
	</div>
</nav>

@code {

	[CascadingParameter(Name = "MessageComponent")]
	protected IMessageComponent? MessageComponent { get; set; }

	[Parameter]
	public EventCallback StartButtonOnClickCallBack { get; set; }
	[Parameter]
	public EventCallback<string> ServerChanged { get; set; }
	[Parameter]
	public EventCallback<string> UserChanged { get; set; }
	[Parameter]
	public EventCallback<string> PasswordChanged { get; set; }
	[Parameter]
	public EventCallback<AuthenticationMode> AuthModeChanged { get; set; }

	[Parameter] public AuthenticationMode AuthenticationMode { get; set; } = AuthenticationMode.WindowsAuth;
	[Parameter] public string Server { get; set; } = string.Empty;
	[Parameter] public string User { get; set; } = string.Empty;
	[Parameter] public string Password { get; set; } = string.Empty;
	[Parameter]
	public EventCallback StopButtonOnClickCallBack { get; set; }

	[Parameter]
	public EventCallback PauseButtonOnClickCallBack { get; set; }

	[Parameter]
	public EventCallback ResumeButtonOnClickCallBack { get; set; }

	private bool ShowUserAndPasswordInputs { get; set; }
	private bool collapseNavMenu = true;
	private string? NavBarCssClass => collapseNavMenu ? null : "show";
	private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
	private bool StartButtonDisabled { get; set; }
	private bool StopButtonDisabled { get; set; }
	private bool PauseButtonDisabled { get; set; }
	private bool ResumeButtonDisabled { get; set; }
	private bool PauseButtonHidden { get; set; }
	private bool ResumeButtonHidden { get; set; }
	private bool SearchButtonDisabled { get; set; }

	private void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}

	private List<AuthenticationMode> GetAuthenticationModes()
	{
		List<AuthenticationMode> authenticationModes = Enum.GetValues(typeof(AuthenticationMode)).Cast<AuthenticationMode>().ToList();

		return authenticationModes;
	}

	private void CollapseUserAndPasswordInputs()
	{
		if (AuthenticationMode == AuthenticationMode.WindowsAuth)
		{
			ShowUserAndPasswordInputs = true;
		}
		else
		{
			ShowUserAndPasswordInputs = false;
		}

		AuthModeChanged.InvokeAsync(AuthenticationMode);
	}

	protected override void OnInitialized()
	{
		CollapseUserAndPasswordInputs();
		ShowButtonsByAction("default");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await AddSearchEventHandler();
		}
	}

	private async void StartButtonOnClick()
	{
		try
		{
			if (string.IsNullOrEmpty(Server))
			{
				throw new ArgumentNullException(null, "Please enter the server.");
			}

			if (AuthenticationMode == AuthenticationMode.SQLServerAuth)
			{
				if (string.IsNullOrEmpty(User))
				{
					throw new ArgumentNullException(null, "Please enter the user.");
				}

				if (string.IsNullOrEmpty(Password))
				{
					throw new ArgumentNullException(null, "Please enter the password.");
				}
			}

			ShowButtonsByAction("start");
			await StartButtonOnClickCallBack.InvokeAsync();
		}
		catch (ArgumentNullException ane)
		{
			if (MessageComponent != null)
			{
				MessageComponent.ShowMessage("Required field", ane.Message, MessageType.Warning);
			}
		}
		catch (Exception e)
		{
			if (MessageComponent != null)
			{
				MessageComponent.ShowMessage("An error has occurred", e.Message, MessageType.Error);
			}
		}
	}

	private Task OnServerChanged(ChangeEventArgs e)
	{
		Server = e?.Value?.ToString() ?? string.Empty;

		return ServerChanged.InvokeAsync(Server);
	}

	private Task OnUserChanged(ChangeEventArgs e)
	{
		User = e?.Value?.ToString() ?? string.Empty;

		return UserChanged.InvokeAsync(User);
	}

	private Task OnPasswordChanged(ChangeEventArgs e)
	{
		Password = e?.Value?.ToString() ?? string.Empty;

		return PasswordChanged.InvokeAsync(Password);
	}

	private void StopButtonOnClick()
	{
		ShowButtonsByAction("stop");
		StopButtonOnClickCallBack.InvokeAsync();
	}

	private void PauseButtonOnClick()
	{
		ShowButtonsByAction("pause");
		PauseButtonOnClickCallBack.InvokeAsync();
	}

	private void ResumeButtonOnClick()
	{
		ShowButtonsByAction("resume");
		ResumeButtonOnClickCallBack.InvokeAsync();
	}

	private void ShowButtonsByAction(string action)
	{
		switch (action.ToUpper())
		{
			case "START":
				StartButtonDisabled = true;
				StopButtonDisabled = !StartButtonDisabled;
				PauseButtonDisabled = false;
				ResumeButtonDisabled = true;
				PauseButtonHidden = false;
				ResumeButtonHidden = true;
				SearchButtonDisabled = true;
				break;
			case "STOP":
				StartButtonDisabled = false;
				StopButtonDisabled = !StartButtonDisabled;
				PauseButtonDisabled = true;
				ResumeButtonDisabled = true;
				PauseButtonHidden = false;
				ResumeButtonHidden = true;
				SearchButtonDisabled = false;
				break;
			case "PAUSE":
				StartButtonDisabled = true;
				StopButtonDisabled = !StartButtonDisabled;
				PauseButtonDisabled = true;
				ResumeButtonDisabled = false;
				PauseButtonHidden = true;
				ResumeButtonHidden = false;
				SearchButtonDisabled = false;
				break;
			case "RESUME":
				StartButtonDisabled = true;
				StopButtonDisabled = !StartButtonDisabled;
				PauseButtonDisabled = false;
				ResumeButtonDisabled = true;
				PauseButtonHidden = false;
				ResumeButtonHidden = true;
				SearchButtonDisabled = true;
				break;
			default:
				StartButtonDisabled = false;
				StopButtonDisabled = !StartButtonDisabled;
				PauseButtonDisabled = true;
				ResumeButtonDisabled = true;
				PauseButtonHidden = false;
				ResumeButtonHidden = true;
				SearchButtonDisabled = true;
				break;
		}
	}

	private async Task SearchButtonOnClick()
	{
		await SearchTable();
	}

	private async Task SearchTable()
	{
		if (LightQueryProfilerInterop != null)
		{
			await LightQueryProfilerInterop.SearchTable("inputSearch", "mainTable");
		}
	}

	private async Task AddSearchEventHandler()
	{
		if (LightQueryProfilerInterop != null)
		{
			await LightQueryProfilerInterop.AddSearchEventHandler("inputSearch", "mainTable");
		}
	}
}