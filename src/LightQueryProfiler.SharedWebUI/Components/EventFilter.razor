
<EditForm Model="@EventFilterModel" OnValidSubmit="SubmitForm">

    <div class="mb-2">
        <label for="eventClass" class="form-label">EventClass</label>
        <InputText id="eventClass" class="form-control" @bind-Value="EventFilterModel.EventClass" placeholder="Contains" />
    </div>

    <div class="mb-2">
        <label for="textData" class="form-label">TextData</label>
        <InputText id="textData" class="form-control" @bind-Value="EventFilterModel.TextData" placeholder="Contains" />
    </div>

    <div class="mb-2">
        <label for="applicationName" class="form-label">ApplicationName</label>
        <InputText id="applicationName" class="form-control" @bind-Value="EventFilterModel.ApplicationName" placeholder="Contains" />
    </div>

    <div class="mb-2">
        <label for="ntUsername" class="form-label">NTUserName</label>
        <InputText id="ntUsername" class="form-control" @bind-Value="EventFilterModel.NTUserName" placeholder="Contains" />
    </div>

    <div class="mb-2">
        <label for="loginName" class="form-label">LoginName</label>
        <InputText id="loginName" class="form-control" @bind-Value="EventFilterModel.LoginName" placeholder="Contains" />
    </div>

    <div class="mb-2">
        <label for="databaseName" class="form-label">DatabaseName</label>
        <InputText id="databaseName" class="form-control" @bind-Value="EventFilterModel.DatabaseName" placeholder="Contains" />
    </div>

    <div class="mb-2">
        <button type="submit" class="btn btn-primary">Apply</button>
        <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </div>

</EditForm>

@code {
    [Parameter] public LightQueryProfiler.Shared.Models.EventFilter EventFilterModel { get; set; } = new();

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;


    private async Task SubmitForm() => await BlazoredModal.CloseAsync(ModalResult.Ok(EventFilterModel));
    private async Task Cancel() => await BlazoredModal.CancelAsync();


}